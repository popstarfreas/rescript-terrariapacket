// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Packet_Status$TerrariaPacket = require("./packet/Packet_Status.bs.js");
var CreativePowers$TerrariaPacket = require("./CreativePowers.bs.js");
var Packet_ChestItem$TerrariaPacket = require("./packet/Packet_ChestItem.bs.js");
var Packet_ItemOwner$TerrariaPacket = require("./packet/Packet_ItemOwner.bs.js");
var Packet_NpcTamper$TerrariaPacket = require("./packet/Packet_NpcTamper.bs.js");
var Packet_NpcUpdate$TerrariaPacket = require("./packet/Packet_NpcUpdate.bs.js");
var Packet_WorldInfo$TerrariaPacket = require("./packet/Packet_WorldInfo.bs.js");
var Packet_ChestPlace$TerrariaPacket = require("./packet/Packet_ChestPlace.bs.js");
var Packet_Disconnect$TerrariaPacket = require("./packet/Packet_Disconnect.bs.js");
var Packet_HealEffect$TerrariaPacket = require("./packet/Packet_HealEffect.bs.js");
var Packet_ManaEffect$TerrariaPacket = require("./packet/Packet_ManaEffect.bs.js");
var Packet_PlayerInfo$TerrariaPacket = require("./packet/Packet_PlayerInfo.bs.js");
var Packet_PlayerMana$TerrariaPacket = require("./packet/Packet_PlayerMana.bs.js");
var Packet_TileModify$TerrariaPacket = require("./packet/Packet_TileModify.bs.js");
var Packet_PlayerSpawn$TerrariaPacket = require("./packet/Packet_PlayerSpawn.bs.js");
var Packet_PlayerActive$TerrariaPacket = require("./packet/Packet_PlayerActive.bs.js");
var Packet_PlayerHealth$TerrariaPacket = require("./packet/Packet_PlayerHealth.bs.js");
var Packet_PlayerUpdate$TerrariaPacket = require("./packet/Packet_PlayerUpdate.bs.js");
var Packet_LoadoutSwitch$TerrariaPacket = require("./packet/Packet_LoadoutSwitch.bs.js");
var Packet_NetModuleLoad$TerrariaPacket = require("./packet/Packet_NetModuleLoad.bs.js");
var Packet_PlayerSlotSet$TerrariaPacket = require("./packet/Packet_PlayerSlotSet.bs.js");
var Packet_ConnectRequest$TerrariaPacket = require("./packet/Packet_ConnectRequest.bs.js");
var Packet_ItemDropUpdate$TerrariaPacket = require("./packet/Packet_ItemDropUpdate.bs.js");
var Packet_LucyAxeMessage$TerrariaPacket = require("./packet/Packet_LucyAxeMessage.bs.js");
var Packet_ProjectileSync$TerrariaPacket = require("./packet/Packet_ProjectileSync.bs.js");
var Packet_TileSquareSend$TerrariaPacket = require("./packet/Packet_TileSquareSend.bs.js");
var Packet_ItemOwnerRemove$TerrariaPacket = require("./packet/Packet_ItemOwnerRemove.bs.js");
var Packet_TileSectionSend$TerrariaPacket = require("./packet/Packet_TileSectionSend.bs.js");
var Packet_DimensionsUpdate$TerrariaPacket = require("./packet/Packet_DimensionsUpdate.bs.js");
var Packet_TileSectionFrame$TerrariaPacket = require("./packet/Packet_TileSectionFrame.bs.js");
var Packet_WorldDataRequest$TerrariaPacket = require("./packet/Packet_WorldDataRequest.bs.js");
var Packet_ProjectileDestroy$TerrariaPacket = require("./packet/Packet_ProjectileDestroy.bs.js");
var Packet_ActiveContainerSync$TerrariaPacket = require("./packet/Packet_ActiveContainerSync.bs.js");
var Packet_PlayerInventorySlot$TerrariaPacket = require("./packet/Packet_PlayerInventorySlot.bs.js");
var Packet_CreditsOrSlimeTransform$TerrariaPacket = require("./packet/Packet_CreditsOrSlimeTransform.bs.js");
var Packet_ItemDropProtectedUpdate$TerrariaPacket = require("./packet/Packet_ItemDropProtectedUpdate.bs.js");
var Packet_ItemDropShimmeredUpdate$TerrariaPacket = require("./packet/Packet_ItemDropShimmeredUpdate.bs.js");
var Packet_PiggyBankVoidLensUpdate$TerrariaPacket = require("./packet/Packet_PiggyBankVoidLensUpdate.bs.js");
var Packet_ShimmerEffectOrCoinLuck$TerrariaPacket = require("./packet/Packet_ShimmerEffectOrCoinLuck.bs.js");
var Packet_InitialTileSectionsRequest$TerrariaPacket = require("./packet/Packet_InitialTileSectionsRequest.bs.js");
var Packet_HaveDryadDoStardewAnimation$TerrariaPacket = require("./packet/Packet_HaveDryadDoStardewAnimation.bs.js");
var Packet_DungeonDefendersEventAttemptSkipWait$TerrariaPacket = require("./packet/Packet_DungeonDefendersEventAttemptSkipWait.bs.js");

function toPacketName(packet) {
  switch (packet.TAG) {
    case "ConnectRequest" :
        return "ConnectRequest";
    case "Disconnect" :
        return "Disconnect";
    case "PlayerSlotSet" :
        return "PlayerSlotSet";
    case "PlayerInfo" :
        return "PlayerInfo";
    case "PlayerInventorySlot" :
        return "PlayerInventorySlot";
    case "WorldDataRequest" :
        return "WorldDataRequest";
    case "WorldInfo" :
        return "WorldInfo";
    case "InitialTileSectionsRequest" :
        return "InitialTileSectionsRequest";
    case "Status" :
        return "Status";
    case "TileSectionSend" :
        return "TileSectionSend";
    case "TileSectionFrame" :
        return "TileSectionFrame";
    case "PlayerSpawn" :
        return "PlayerSpawn";
    case "PlayerUpdate" :
        return "PlayerUpdate";
    case "PlayerActive" :
        return "PlayerActive";
    case "PlayerHealth" :
        return "PlayerHealth";
    case "TileModify" :
        return "TileModify";
    case "TimeSet" :
        return "TimeSet";
    case "DoorUse" :
        return "DoorUse";
    case "TileSquareSend" :
        return "TileSquareSend";
    case "ItemDropUpdate" :
        return "ItemDropUpdate";
    case "ItemOwner" :
        return "ItemOwner";
    case "NpcUpdate" :
        return "NpcUpdate";
    case "NpcItemStrike" :
        return "NpcItemStrike";
    case "ProjectileSync" :
        return "ProjecitleSync";
    case "NpcStrike" :
        return "NpcStrike";
    case "ProjectileDestroy" :
        return "ProjectileDestroy";
    case "PvpToggle" :
        return "PvpToggle";
    case "ChestOpen" :
        return "ChestOpen";
    case "ChestItem" :
        return "ChestItem";
    case "ActiveContainerSync" :
        return "ActiveContainerSync";
    case "ChestPlace" :
        return "ChestPlace";
    case "HealEffect" :
        return "HealEffect";
    case "Zones" :
        return "Zones";
    case "PasswordRequired" :
        return "PasswordRequired";
    case "PasswordSend" :
        return "PasswordSend";
    case "ItemOwnerRemove" :
        return "ItemOwnerRemove";
    case "NpcTalk" :
        return "NpcTalk";
    case "PlayerAnimation" :
        return "PlayerAnimation";
    case "PlayerMana" :
        return "PlayerMana";
    case "ManaEffect" :
        return "ManaEffect";
    case "PlayerTeam" :
        return "PlayerTeam";
    case "SignRead" :
        return "SignRead";
    case "SignNew" :
        return "SignNew";
    case "LiquidSet" :
        return "LiquidSet";
    case "PlayerSpawnSelf" :
        return "PlayerSpawnSelf";
    case "PlayerBuffsSet" :
        return "PlayerBuffsSet";
    case "NpcSpecialEffect" :
        return "NpcSpecialEffect";
    case "ChestOrTempleUnlock" :
        return "ChestOrTempleUnlock";
    case "NpcBuffAdd" :
        return "NpcBuffAdd";
    case "NpcBuffUpdate" :
        return "NpcBuffUpdate";
    case "PlayerBuffAdd" :
        return "PlayerBuffAdd";
    case "NpcNameUpdate" :
        return "NpcNameUpdate";
    case "GoodEvilUpdate" :
        return "GoodEvilUpdate";
    case "HarpPlay" :
        return "HarpPlay";
    case "SwitchHit" :
        return "SwitchHit";
    case "NpcHomeUpdate" :
        return "NpcHomeUpdate";
    case "BossOrInvasionSpawn" :
        return "BossOrInvasionSpawn";
    case "PlayerDodge" :
        return "PlayerDodge";
    case "TilePaint" :
        return "TilePaint";
    case "WallPaint" :
        return "WallPaint";
    case "Teleport" :
        return "Teleport";
    case "PlayerHealOther" :
        return "PlayerHealOther";
    case "DimensionsUpdate" :
        return "DimensionsUpdate";
    case "ClientUuid" :
        return "ClientUuid";
    case "ChestName" :
        return "ChestName";
    case "NpcCatch" :
        return "NpcCatch";
    case "NpcRelease" :
        return "NpcRelease";
    case "TravellingMerchantInventory" :
        return "TravellingMerchantInventory";
    case "TeleportationPotion" :
        return "TeleportationPotion";
    case "AnglerQuest" :
        return "AnglerQuest";
    case "AnglerQuestComplete" :
        return "AnglerQuestComplete";
    case "AnglerQuestsCompletedAmount" :
        return "AnglerQuestsCompletedAmount";
    case "TemporaryAnimationCreate" :
        return "TemporaryAnimationCreate";
    case "InvasionProgressReport" :
        return "InvasionProgressReport";
    case "ObjectPlace" :
        return "ObjectPlace";
    case "PlayerChestIndexSync" :
        return "PlayerChestIndexSync";
    case "CombatNumberCreate" :
        return "CombatNumberCreate";
    case "NetModuleLoad" :
        return "NetModuleLoad";
    case "NpcKillCount" :
        return "NpcKillCount";
    case "PlayerStealth" :
        return "PlayerStealth";
    case "ItemForceIntoNearestChest" :
        return "ItemForceIntoNearestChest";
    case "TileEntityUpdate" :
        return "TileEntityUpdate";
    case "TileEntityPlace" :
        return "TileEntityPlace";
    case "ItemDropModify" :
        return "ItemDropModify";
    case "ItemFramePlace" :
        return "ItemFramePlace";
    case "ItemDropInstancedUpdate" :
        return "ItemDropInstancedUpdate";
    case "EmoteBubble" :
        return "EmoteBubble";
    case "ExtraValueSync" :
        return "ExtraValueSync";
    case "SocialHandshake" :
        return "SocialHandshake";
    case "Unused" :
        return "Unused";
    case "PortalKill" :
        return "PortalKill";
    case "PlayerTeleportPortal" :
        return "PlayerTeleportPortal";
    case "NpcKilledNotification" :
        return "NpcKilledNotification";
    case "EventNotification" :
        return "EventNotification";
    case "MinionTargetUpdate" :
        return "MinionTargetUpdate";
    case "NpcTeleportPortal" :
        return "NpcTeleportPortal";
    case "ShieldStrengthsUpdate" :
        return "ShieldStrengthsUpdate";
    case "NebulaLevelUp" :
        return "NebulaLevelUp";
    case "MoonLordCountdown" :
        return "MoonLordCountdown";
    case "NpcShopItem" :
        return "NpcShopItem";
    case "GemLockToggle" :
        return "GemLockToggle";
    case "SmokePoof" :
        return "SmokePoof";
    case "ChatMessageSmart" :
        return "ChatMessageSmart";
    case "WiredCannonShot" :
        return "WiredCannonShot";
    case "MassWireOperation" :
        return "MassWireOperation";
    case "MassWireOperationPay" :
        return "MassWireOperationPay";
    case "PartyToggle" :
        return "PartyToggle";
    case "TreeGrowFx" :
        return "TreeGrowFx";
    case "CrystalInvasionStart" :
        return "CrystalInvasionStart";
    case "CrystalInvasionWipeAll" :
        return "CrystalInvasionWipeAll";
    case "MinionAttackTargetUpdate" :
        return "MinionAttackTargetUpdate";
    case "CrystalInvasionSendWaitTime" :
        return "CrystalInvasionSendWaitTime";
    case "PlayerDamage" :
        return "PlayerDamage";
    case "PlayerDeath" :
        return "PlayerDeath";
    case "CombatTextCreate" :
        return "CombatTextCreate";
    case "Emoji" :
        return "Emoji";
    case "TileEntityDisplayDollItemSync" :
        return "TileEntityDisplayDollItemSync";
    case "TileEntityInteractionRequest" :
        return "TileEntityInteractionRequest";
    case "WeaponsRackTryPlacing" :
        return "WeaponsRackTryPlacing";
    case "TileEntityHatRackItemSync" :
        return "TileEntityHatRackItemSync";
    case "TilePickingSync" :
        return "TilePickingSync";
    case "RevengeMarkerSync" :
        return "RevengeMarkerSync";
    case "RevengeMarkerRemove" :
        return "RevengeMarkerRemove";
    case "GolfBallLandInCup" :
        return "GolfBallLandInCup";
    case "ClientFinishConnectingToServer" :
        return "ClientFinishConnectingToServer";
    case "NpcFishOut" :
        return "NpcFishOut";
    case "NpcTamper" :
        return "NpcTamper";
    case "LegacySoundPlay" :
        return "LegacySoundPlay";
    case "FoodPlatterTryPlacing" :
        return "FoodPlatterTryPlacing";
    case "PlayerLuckFactorsUpdate" :
        return "PlayerLuckFactorsUpdate";
    case "PlayerDead" :
        return "PlayerDead";
    case "CavernMonsterTypeSync" :
        return "CavernMonsterTypeSync";
    case "NpcBuffRemovalRequest" :
        return "NpcBuffRemovalRequest";
    case "ClientSyncedInventory" :
        return "ClientSyncedInventory";
    case "CountsAsHostForGameplaySet" :
        return "CountsAsHostForGameplaySet";
    case "CreditsOrSlimeTransform" :
        return "CreditsOrSlimeTransform";
    case "LucyAxeMessage" :
        return "LucyAxeMessage";
    case "PiggyBankVoidLensUpdate" :
        return "PiggyBankVoidLensUpdate";
    case "DungeonDefendersEventAttemptSkipWait" :
        return "DungeonDefendersEventAttemptSkipWait";
    case "HaveDryadDoStardewAnimation" :
        return "HaveDryadDoStardewAnimation";
    case "ItemDropShimmeredUpdate" :
        return "ItemDropShimmeredUpdate";
    case "ShimmerEffectOrCoinLuck" :
        return "ShimmerEffectOrCoinLuck";
    case "LoadoutSwitch" :
        return "LoadoutSwitch";
    case "ItemDropProtectedUpdate" :
        return "ItemDropProtectedUpdate";
    
  }
}

var LazyPacket = {
  toPacketName: toPacketName
};

function toBuffer(packet, _fromServer) {
  switch (packet.TAG) {
    case "ConnectRequest" :
        return Packet_ConnectRequest$TerrariaPacket.toBuffer(packet._0);
    case "Disconnect" :
        return Packet_Disconnect$TerrariaPacket.toBuffer(packet._0);
    case "PlayerSlotSet" :
        return Packet_PlayerSlotSet$TerrariaPacket.toBuffer(packet._0);
    case "PlayerInfo" :
        return Packet_PlayerInfo$TerrariaPacket.toBuffer(packet._0);
    case "PlayerInventorySlot" :
        return Packet_PlayerInventorySlot$TerrariaPacket.toBuffer(packet._0);
    case "WorldDataRequest" :
        return Packet_WorldDataRequest$TerrariaPacket.toBuffer(packet._0);
    case "WorldInfo" :
        return Packet_WorldInfo$TerrariaPacket.toBuffer(packet._0);
    case "InitialTileSectionsRequest" :
        return Packet_InitialTileSectionsRequest$TerrariaPacket.toBuffer(packet._0);
    case "Status" :
        return Packet_Status$TerrariaPacket.toBuffer(packet._0);
    case "TileSectionSend" :
        return Packet_TileSectionSend$TerrariaPacket.toBuffer(packet._0);
    case "TileSectionFrame" :
        return Packet_TileSectionFrame$TerrariaPacket.toBuffer(packet._0);
    case "PlayerSpawn" :
        return Packet_PlayerSpawn$TerrariaPacket.toBuffer(packet._0);
    case "PlayerUpdate" :
        return Packet_PlayerUpdate$TerrariaPacket.toBuffer(packet._0);
    case "PlayerActive" :
        return Packet_PlayerActive$TerrariaPacket.toBuffer(packet._0);
    case "PlayerHealth" :
        return Packet_PlayerHealth$TerrariaPacket.toBuffer(packet._0);
    case "TileModify" :
        return Packet_TileModify$TerrariaPacket.toBuffer(packet._0);
    case "TileSquareSend" :
        return Packet_TileSquareSend$TerrariaPacket.toBuffer(packet._0);
    case "ItemDropUpdate" :
        return Packet_ItemDropUpdate$TerrariaPacket.toBuffer(packet._0);
    case "ItemOwner" :
        return Packet_ItemOwner$TerrariaPacket.toBuffer(packet._0);
    case "NpcUpdate" :
        return Packet_NpcUpdate$TerrariaPacket.toBuffer(packet._0);
    case "ProjectileSync" :
        return Packet_ProjectileSync$TerrariaPacket.toBuffer(packet._0);
    case "ProjectileDestroy" :
        return Packet_ProjectileDestroy$TerrariaPacket.toBuffer(packet._0);
    case "ChestItem" :
        return Packet_ChestItem$TerrariaPacket.toBuffer(packet._0);
    case "ActiveContainerSync" :
        return Packet_ActiveContainerSync$TerrariaPacket.toBuffer(packet._0);
    case "ChestPlace" :
        return Packet_ChestPlace$TerrariaPacket.toBuffer(packet._0);
    case "HealEffect" :
        return Packet_HealEffect$TerrariaPacket.toBuffer(packet._0);
    case "ItemOwnerRemove" :
        return Packet_ItemOwnerRemove$TerrariaPacket.toBuffer(packet._0);
    case "PlayerMana" :
        return Packet_PlayerMana$TerrariaPacket.toBuffer(packet._0);
    case "ManaEffect" :
        return Packet_ManaEffect$TerrariaPacket.toBuffer(packet._0);
    case "DimensionsUpdate" :
        return Packet_DimensionsUpdate$TerrariaPacket.toBuffer(packet._0);
    case "NetModuleLoad" :
        return Packet_NetModuleLoad$TerrariaPacket.toBuffer(packet._0);
    case "NpcTamper" :
        return Packet_NpcTamper$TerrariaPacket.toBuffer(packet._0);
    case "CreditsOrSlimeTransform" :
        return Packet_CreditsOrSlimeTransform$TerrariaPacket.toBuffer(packet._0);
    case "LucyAxeMessage" :
        return Packet_LucyAxeMessage$TerrariaPacket.toBuffer(packet._0);
    case "PiggyBankVoidLensUpdate" :
        return Packet_PiggyBankVoidLensUpdate$TerrariaPacket.toBuffer(packet._0);
    case "DungeonDefendersEventAttemptSkipWait" :
        return Packet_DungeonDefendersEventAttemptSkipWait$TerrariaPacket.toBuffer(packet._0);
    case "HaveDryadDoStardewAnimation" :
        return Packet_HaveDryadDoStardewAnimation$TerrariaPacket.toBuffer(packet._0);
    case "ItemDropShimmeredUpdate" :
        return Packet_ItemDropShimmeredUpdate$TerrariaPacket.toBuffer(packet._0);
    case "ShimmerEffectOrCoinLuck" :
        return Packet_ShimmerEffectOrCoinLuck$TerrariaPacket.toBuffer(packet._0);
    case "LoadoutSwitch" :
        return Packet_LoadoutSwitch$TerrariaPacket.toBuffer(packet._0);
    case "ItemDropProtectedUpdate" :
        return Packet_ItemDropProtectedUpdate$TerrariaPacket.toBuffer(packet._0);
    default:
      return ;
  }
}

function serialize(parsed, fromServer) {
  if (parsed.TAG === "ShouldSerialize") {
    return toBuffer(parsed._0, fromServer);
  } else {
    return parsed._1;
  }
}

function toPacketName$1(packet) {
  switch (packet.TAG) {
    case "ConnectRequest" :
        return "ConnectRequest";
    case "Disconnect" :
        return "Disconnect(reason: \"" + packet._0.reason.toString() + ")\"";
    case "PlayerSlotSet" :
        return "PlayerSlotSet";
    case "PlayerInfo" :
        return "PlayerInfo";
    case "PlayerInventorySlot" :
        return "PlayerInventorySlot";
    case "WorldDataRequest" :
        return "WorldDataRequest";
    case "WorldInfo" :
        return "WorldInfo";
    case "InitialTileSectionsRequest" :
        return "InitialTileSectionsRequest";
    case "Status" :
        return "Status";
    case "TileSectionSend" :
        return "TileSectionSend";
    case "TileSectionFrame" :
        return "TileSectionFrame";
    case "PlayerSpawn" :
        return "PlayerSpawn";
    case "PlayerUpdate" :
        return "PlayerUpdate";
    case "PlayerActive" :
        return "PlayerActive";
    case "PlayerHealth" :
        return "PlayerHealth";
    case "TileModify" :
        return "TileModify";
    case "TimeSet" :
        return "TimeSet";
    case "DoorUse" :
        return "DoorUse";
    case "TileSquareSend" :
        return "TileSquareSend";
    case "ItemDropUpdate" :
        return "ItemDropUpdate";
    case "ItemOwner" :
        return "ItemOwner";
    case "NpcUpdate" :
        var match = packet._0;
        return "NpcUpdate(npcSlotId: " + String(match.npcSlotId) + ", npcTypeId: " + String(match.npcTypeId) + ", x: " + String(match.x) + ", y: " + String(match.y) + ", vx: " + String(match.vx) + ", vy: " + String(match.vy) + ", target: " + String(match.target) + ", directionX: " + PervasivesU.string_of_bool(match.directionX) + ", directionY: " + PervasivesU.string_of_bool(match.directionY) + ")";
    case "NpcItemStrike" :
        return "NpcItemStrike";
    case "ProjectileSync" :
        var match$1 = packet._0;
        return "ProjectileSync(projectileId: " + String(match$1.projectileId) + ", x: " + String(match$1.x) + ", y: " + String(match$1.y) + ", vx: " + String(match$1.vx) + ", vy: " + String(match$1.vy) + ", owner: " + String(match$1.owner) + ", projectileType: " + String(match$1.projectileType) + ", damage: " + Belt_Option.mapWithDefault(match$1.damage, "None", (function (damage) {
                      return String(damage);
                    })) + ", knockback: " + Belt_Option.mapWithDefault(match$1.knockback, "None", (function (knockback) {
                      return String(knockback);
                    })) + ")";
    case "NpcStrike" :
        return "NpcStrike";
    case "ProjectileDestroy" :
        var projectileDestroy = packet._0;
        return "ProjectileDestroy(projectileId: " + String(projectileDestroy.projectileId) + ", owner: " + String(projectileDestroy.owner) + ")";
    case "PvpToggle" :
        return "PvpToggle";
    case "ChestOpen" :
        return "ChestOpen";
    case "ChestItem" :
        return "ChestItem";
    case "ActiveContainerSync" :
        return "ActiveContainerSync";
    case "ChestPlace" :
        return "ChestPlace";
    case "HealEffect" :
        return "HealEffect";
    case "Zones" :
        return "Zones";
    case "PasswordRequired" :
        return "PasswordRequired";
    case "PasswordSend" :
        return "PasswordSend";
    case "ItemOwnerRemove" :
        return "ItemOwnerRemove";
    case "NpcTalk" :
        return "NpcTalk";
    case "PlayerAnimation" :
        return "PlayerAnimation";
    case "PlayerMana" :
        return "PlayerMana";
    case "ManaEffect" :
        return "ManaEffect";
    case "PlayerTeam" :
        return "PlayerTeam";
    case "SignRead" :
        return "SignRead";
    case "SignNew" :
        return "SignNew";
    case "LiquidSet" :
        return "LiquidSet";
    case "PlayerSpawnSelf" :
        return "PlayerSpawnSelf";
    case "PlayerBuffsSet" :
        return "PlayerBuffsSet";
    case "NpcSpecialEffect" :
        return "NpcSpecialEffect";
    case "ChestOrTempleUnlock" :
        return "ChestOrTempleUnlock";
    case "NpcBuffAdd" :
        return "NpcBuffAdd";
    case "NpcBuffUpdate" :
        return "NpcBuffUpdate";
    case "PlayerBuffAdd" :
        return "PlayerBuffAdd";
    case "NpcNameUpdate" :
        return "NpcNameUpdate";
    case "GoodEvilUpdate" :
        return "GoodEvilUpdate";
    case "HarpPlay" :
        return "HarpPlay";
    case "SwitchHit" :
        return "SwitchHit";
    case "NpcHomeUpdate" :
        return "NpcHomeUpdate";
    case "BossOrInvasionSpawn" :
        return "BossOrInvasionSpawn";
    case "PlayerDodge" :
        return "PlayerDodge";
    case "TilePaint" :
        return "TilePaint";
    case "WallPaint" :
        return "WallPaint";
    case "Teleport" :
        return "Teleport";
    case "PlayerHealOther" :
        return "PlayerHealOther";
    case "DimensionsUpdate" :
        return "DimensionsUpdate";
    case "ClientUuid" :
        return "ClientUuid";
    case "ChestName" :
        return "ChestName";
    case "NpcCatch" :
        return "NpcCatch";
    case "NpcRelease" :
        return "NpcRelease";
    case "TravellingMerchantInventory" :
        return "TravellingMerchantInventory";
    case "TeleportationPotion" :
        return "TeleportationPotion";
    case "AnglerQuest" :
        return "AnglerQuest";
    case "AnglerQuestComplete" :
        return "AnglerQuestComplete";
    case "AnglerQuestsCompletedAmount" :
        return "AnglerQuestsCompletedAmount";
    case "TemporaryAnimationCreate" :
        return "TemporaryAnimationCreate";
    case "InvasionProgressReport" :
        return "InvasionProgressReport";
    case "ObjectPlace" :
        return "ObjectPlace";
    case "PlayerChestIndexSync" :
        return "PlayerChestIndexSync";
    case "CombatNumberCreate" :
        return "CombatNumberCreate";
    case "NetModuleLoad" :
        var netModuleLoad = packet._0;
        var tmp;
        switch (netModuleLoad.TAG) {
          case "Liquid" :
              tmp = "Liquid";
              break;
          case "ClientText" :
              tmp = "ClientText(" + netModuleLoad._1 + ")";
              break;
          case "ServerText" :
              tmp = "ServerText(" + netModuleLoad._1.text + ")";
              break;
          case "Ping" :
              tmp = "Ping";
              break;
          case "Ambience" :
              tmp = "Ambience";
              break;
          case "Bestiary" :
              tmp = "Bestiary";
              break;
          case "CreativeUnlocks" :
              tmp = "CreativeUnlocks";
              break;
          case "CreativePower" :
              tmp = "CreativePower { " + CreativePowers$TerrariaPacket.toString(netModuleLoad._0) + " }";
              break;
          case "CreativeUnlocksPlayerReport" :
              tmp = "CreativeUnlocksPlayerReport";
              break;
          case "TeleportPylon" :
              tmp = "TeleportPylon";
              break;
          case "Particles" :
              tmp = "Particles";
              break;
          case "CreativePowerPermissions" :
              tmp = "CreativePowerPermissions";
              break;
          
        }
        return "NetModuleLoad(" + tmp + ")";
    case "NpcKillCount" :
        return "NpcKillCount";
    case "PlayerStealth" :
        return "PlayerStealth";
    case "ItemForceIntoNearestChest" :
        return "ItemForceIntoNearestChest";
    case "TileEntityUpdate" :
        return "TileEntityUpdate";
    case "TileEntityPlace" :
        return "TileEntityPlace";
    case "ItemDropModify" :
        return "ItemDropModify";
    case "ItemFramePlace" :
        return "ItemFramePlace";
    case "ItemDropInstancedUpdate" :
        return "ItemDropInstancedUpdate";
    case "EmoteBubble" :
        return "EmoteBubble";
    case "ExtraValueSync" :
        return "ExtraValueSync";
    case "SocialHandshake" :
        return "SocialHandshake";
    case "Unused" :
        return "Unused";
    case "PortalKill" :
        return "PortalKill";
    case "PlayerTeleportPortal" :
        return "PlayerTeleportPortal";
    case "NpcKilledNotification" :
        return "NpcKilledNotification";
    case "EventNotification" :
        return "EventNotification";
    case "MinionTargetUpdate" :
        return "MinionTargetUpdate";
    case "NpcTeleportPortal" :
        return "NpcTeleportPortal";
    case "ShieldStrengthsUpdate" :
        return "ShieldStrengthsUpdate";
    case "NebulaLevelUp" :
        return "NebulaLevelUp";
    case "MoonLordCountdown" :
        return "MoonLordCountdown";
    case "NpcShopItem" :
        return "NpcShopItem";
    case "GemLockToggle" :
        return "GemLockToggle";
    case "SmokePoof" :
        return "SmokePoof";
    case "ChatMessageSmart" :
        return "ChatMessageSmart";
    case "WiredCannonShot" :
        return "WiredCannonShot";
    case "MassWireOperation" :
        return "MassWireOperation";
    case "MassWireOperationPay" :
        return "MassWireOperationPay";
    case "PartyToggle" :
        return "PartyToggle";
    case "TreeGrowFx" :
        return "TreeGrowFx";
    case "CrystalInvasionStart" :
        return "CrystalInvasionStart";
    case "CrystalInvasionWipeAll" :
        return "CrystalInvasionWipeAll";
    case "MinionAttackTargetUpdate" :
        return "MinionAttackTargetUpdate";
    case "CrystalInvasionSendWaitTime" :
        return "CrystalInvasionSendWaitTime";
    case "PlayerDamage" :
        return "PlayerDamage";
    case "PlayerDeath" :
        return "PlayerDeath";
    case "CombatTextCreate" :
        return "CombatTextCreate";
    case "Emoji" :
        return "Emoji";
    case "TileEntityDisplayDollItemSync" :
        return "TileEntityDisplayDollItemSync";
    case "TileEntityInteractionRequest" :
        return "TileEntityInteractionRequest";
    case "WeaponsRackTryPlacing" :
        return "WeaponsRackTryPlacing";
    case "TileEntityHatRackItemSync" :
        return "TileEntityHatRackItemSync";
    case "TilePickingSync" :
        return "TilePickingSync";
    case "RevengeMarkerSync" :
        return "RevengeMarkerSync";
    case "RevengeMarkerRemove" :
        return "RevengeMarkerRemove";
    case "GolfBallLandInCup" :
        return "GolfBallLandInCup";
    case "ClientFinishConnectingToServer" :
        return "ClientFinishConnectingToServer";
    case "NpcFishOut" :
        return "NpcFishOut";
    case "NpcTamper" :
        return "NpcTamper";
    case "LegacySoundPlay" :
        return "LegacySoundPlay";
    case "FoodPlatterTryPlacing" :
        return "FoodPlatterTryPlacing";
    case "PlayerLuckFactorsUpdate" :
        return "PlayerLuckFactorsUpdate";
    case "PlayerDead" :
        return "PlayerDead";
    case "CavernMonsterTypeSync" :
        return "CavernMonsterTypeSync";
    case "NpcBuffRemovalRequest" :
        return "NpcBuffRemovalRequest";
    case "ClientSyncedInventory" :
        return "ClientSyncedInventory";
    case "CountsAsHostForGameplaySet" :
        return "CountsAsHostForGameplaySet";
    case "CreditsOrSlimeTransform" :
        return "CreditsOrSlimeTransform";
    case "LucyAxeMessage" :
        return "LucyAxeMessage";
    case "PiggyBankVoidLensUpdate" :
        return "PiggyBankVoidLensUpdate";
    case "DungeonDefendersEventAttemptSkipWait" :
        return "DungeonDefendersEventAttemptSkipWait";
    case "HaveDryadDoStardewAnimation" :
        return "HaveDryadDoStardewAnimation";
    case "ItemDropShimmeredUpdate" :
        return "ItemDropShimmeredUpdate";
    case "ShimmerEffectOrCoinLuck" :
        return "ShimmerEffectOrCoinLuck";
    case "LoadoutSwitch" :
        return "LoadoutSwitch";
    case "ItemDropProtectedUpdate" :
        return "ItemDropProtectedUpdate";
    
  }
}

var ConnectRequest;

var Disconnect;

var PlayerSlotSet;

var PlayerInfo;

var PlayerInventorySlot;

var WorldDataRequest;

var WorldInfo;

var InitialTileSectionsRequest;

var Status;

var TileSectionSend;

var TileSectionFrame;

var PlayerSpawn;

var PlayerUpdate;

var PlayerActive;

var PlayerHealth;

var TileModify;

var TimeSet;

var DoorUse;

var TileSquareSend;

var ItemDropUpdate;

var ItemOwner;

var NpcUpdate;

var NpcItemStrike;

var ProjectileSync;

var NpcStrike;

var ProjectileDestroy;

var PvpToggle;

var ChestOpen;

var ChestItem;

var ActiveContainerSync;

var ChestPlace;

var HealEffect;

var Zones;

var PasswordRequired;

var PasswordSend;

var ItemOwnerRemove;

var NpcTalk;

var PlayerAnimation;

var PlayerMana;

var ManaEffect;

var PlayerTeam;

var SignRead;

var SignNew;

var LiquidSet;

var PlayerSpawnSelf;

var PlayerBuffsSet;

var NpcSpecialEffect;

var ChestOrTempleUnlock;

var NpcBuffAdd;

var NpcBuffUpdate;

var PlayerBuffAdd;

var NpcNameUpdate;

var GoodEvilUpdate;

var HarpPlay;

var SwitchHit;

var NpcHomeUpdate;

var BossOrInvasionSpawn;

var PlayerDodge;

var TilePaint;

var WallPaint;

var Teleport;

var PlayerHealOther;

var DimensionsUpdate;

var ClientUuid;

var ChestName;

var NpcCatch;

var NpcRelease;

var TravellingMerchantInventory;

var TeleportationPotion;

var AnglerQuest;

var AnglerQuestComplete;

var AnglerQuestsCompletedAmount;

var TemporaryAnimationCreate;

var InvasionProgressReport;

var ObjectPlace;

var PlayerChestIndexSync;

var CombatNumberCreate;

var NetModuleLoad;

var NpcKillCount;

var PlayerStealth;

var ItemForceIntoNearestChest;

var TileEntityUpdate;

var TileEntityPlace;

var ItemDropModify;

var ItemFramePlace;

var ItemDropInstancedUpdate;

var EmoteBubble;

var ExtraValueSync;

var SocialHandshake;

var Unused;

var PortalKill;

var PlayerTeleportPortal;

var NpcKilledNotification;

var EventNotification;

var MinionTargetUpdate;

var NpcTeleportPortal;

var ShieldStrengthsUpdate;

var NebulaLevelUp;

var MoonLordCountdown;

var NpcShopItem;

var GemLockToggle;

var SmokePoof;

var ChatMessageSmart;

var WiredCannonShot;

var MassWireOperation;

var MassWireOperationPay;

var PartyToggle;

var TreeGrowFx;

var CrystalInvasionStart;

var CrystalInvasionWipeAll;

var MinionAttackTargetUpdate;

var CrystalInvasionSendWaitTime;

var PlayerDamage;

var PlayerDeath;

var CombatTextCreate;

var Emoji;

var TileEntityDisplayDollItemSync;

var TileEntityInteractionRequest;

var WeaponsRackTryPlacing;

var TileEntityHatRackItemSync;

var TilePickingSync;

var RevengeMarkerSync;

var RevengeMarkerRemove;

var GolfBallLandInCup;

var ClientFinishConnectingToServer;

var NpcFishOut;

var NpcTamper;

var LegacySoundPlay;

var FoodPlatterTryPlacing;

var PlayerLuckFactorsUpdate;

var PlayerDead;

var CavernMonsterTypeSync;

var NpcBuffRemovalRequest;

var ClientSyncedInventory;

var CountsAsHostForGameplaySet;

var CreditsOrSlimeTransform;

var LucyAxeMessage;

var PiggyBankVoidLensUpdate;

var DungeonDefendersEventAttemptSkipWait;

var HaveDryadDoStardewAnimation;

var ItemDropShimmeredUpdate;

var ShimmerEffectOrCoinLuck;

var LoadoutSwitch;

var ItemDropProtectedUpdate;

exports.ConnectRequest = ConnectRequest;
exports.Disconnect = Disconnect;
exports.PlayerSlotSet = PlayerSlotSet;
exports.PlayerInfo = PlayerInfo;
exports.PlayerInventorySlot = PlayerInventorySlot;
exports.WorldDataRequest = WorldDataRequest;
exports.WorldInfo = WorldInfo;
exports.InitialTileSectionsRequest = InitialTileSectionsRequest;
exports.Status = Status;
exports.TileSectionSend = TileSectionSend;
exports.TileSectionFrame = TileSectionFrame;
exports.PlayerSpawn = PlayerSpawn;
exports.PlayerUpdate = PlayerUpdate;
exports.PlayerActive = PlayerActive;
exports.PlayerHealth = PlayerHealth;
exports.TileModify = TileModify;
exports.TimeSet = TimeSet;
exports.DoorUse = DoorUse;
exports.TileSquareSend = TileSquareSend;
exports.ItemDropUpdate = ItemDropUpdate;
exports.ItemOwner = ItemOwner;
exports.NpcUpdate = NpcUpdate;
exports.NpcItemStrike = NpcItemStrike;
exports.ProjectileSync = ProjectileSync;
exports.NpcStrike = NpcStrike;
exports.ProjectileDestroy = ProjectileDestroy;
exports.PvpToggle = PvpToggle;
exports.ChestOpen = ChestOpen;
exports.ChestItem = ChestItem;
exports.ActiveContainerSync = ActiveContainerSync;
exports.ChestPlace = ChestPlace;
exports.HealEffect = HealEffect;
exports.Zones = Zones;
exports.PasswordRequired = PasswordRequired;
exports.PasswordSend = PasswordSend;
exports.ItemOwnerRemove = ItemOwnerRemove;
exports.NpcTalk = NpcTalk;
exports.PlayerAnimation = PlayerAnimation;
exports.PlayerMana = PlayerMana;
exports.ManaEffect = ManaEffect;
exports.PlayerTeam = PlayerTeam;
exports.SignRead = SignRead;
exports.SignNew = SignNew;
exports.LiquidSet = LiquidSet;
exports.PlayerSpawnSelf = PlayerSpawnSelf;
exports.PlayerBuffsSet = PlayerBuffsSet;
exports.NpcSpecialEffect = NpcSpecialEffect;
exports.ChestOrTempleUnlock = ChestOrTempleUnlock;
exports.NpcBuffAdd = NpcBuffAdd;
exports.NpcBuffUpdate = NpcBuffUpdate;
exports.PlayerBuffAdd = PlayerBuffAdd;
exports.NpcNameUpdate = NpcNameUpdate;
exports.GoodEvilUpdate = GoodEvilUpdate;
exports.HarpPlay = HarpPlay;
exports.SwitchHit = SwitchHit;
exports.NpcHomeUpdate = NpcHomeUpdate;
exports.BossOrInvasionSpawn = BossOrInvasionSpawn;
exports.PlayerDodge = PlayerDodge;
exports.TilePaint = TilePaint;
exports.WallPaint = WallPaint;
exports.Teleport = Teleport;
exports.PlayerHealOther = PlayerHealOther;
exports.DimensionsUpdate = DimensionsUpdate;
exports.ClientUuid = ClientUuid;
exports.ChestName = ChestName;
exports.NpcCatch = NpcCatch;
exports.NpcRelease = NpcRelease;
exports.TravellingMerchantInventory = TravellingMerchantInventory;
exports.TeleportationPotion = TeleportationPotion;
exports.AnglerQuest = AnglerQuest;
exports.AnglerQuestComplete = AnglerQuestComplete;
exports.AnglerQuestsCompletedAmount = AnglerQuestsCompletedAmount;
exports.TemporaryAnimationCreate = TemporaryAnimationCreate;
exports.InvasionProgressReport = InvasionProgressReport;
exports.ObjectPlace = ObjectPlace;
exports.PlayerChestIndexSync = PlayerChestIndexSync;
exports.CombatNumberCreate = CombatNumberCreate;
exports.NetModuleLoad = NetModuleLoad;
exports.NpcKillCount = NpcKillCount;
exports.PlayerStealth = PlayerStealth;
exports.ItemForceIntoNearestChest = ItemForceIntoNearestChest;
exports.TileEntityUpdate = TileEntityUpdate;
exports.TileEntityPlace = TileEntityPlace;
exports.ItemDropModify = ItemDropModify;
exports.ItemFramePlace = ItemFramePlace;
exports.ItemDropInstancedUpdate = ItemDropInstancedUpdate;
exports.EmoteBubble = EmoteBubble;
exports.ExtraValueSync = ExtraValueSync;
exports.SocialHandshake = SocialHandshake;
exports.Unused = Unused;
exports.PortalKill = PortalKill;
exports.PlayerTeleportPortal = PlayerTeleportPortal;
exports.NpcKilledNotification = NpcKilledNotification;
exports.EventNotification = EventNotification;
exports.MinionTargetUpdate = MinionTargetUpdate;
exports.NpcTeleportPortal = NpcTeleportPortal;
exports.ShieldStrengthsUpdate = ShieldStrengthsUpdate;
exports.NebulaLevelUp = NebulaLevelUp;
exports.MoonLordCountdown = MoonLordCountdown;
exports.NpcShopItem = NpcShopItem;
exports.GemLockToggle = GemLockToggle;
exports.SmokePoof = SmokePoof;
exports.ChatMessageSmart = ChatMessageSmart;
exports.WiredCannonShot = WiredCannonShot;
exports.MassWireOperation = MassWireOperation;
exports.MassWireOperationPay = MassWireOperationPay;
exports.PartyToggle = PartyToggle;
exports.TreeGrowFx = TreeGrowFx;
exports.CrystalInvasionStart = CrystalInvasionStart;
exports.CrystalInvasionWipeAll = CrystalInvasionWipeAll;
exports.MinionAttackTargetUpdate = MinionAttackTargetUpdate;
exports.CrystalInvasionSendWaitTime = CrystalInvasionSendWaitTime;
exports.PlayerDamage = PlayerDamage;
exports.PlayerDeath = PlayerDeath;
exports.CombatTextCreate = CombatTextCreate;
exports.Emoji = Emoji;
exports.TileEntityDisplayDollItemSync = TileEntityDisplayDollItemSync;
exports.TileEntityInteractionRequest = TileEntityInteractionRequest;
exports.WeaponsRackTryPlacing = WeaponsRackTryPlacing;
exports.TileEntityHatRackItemSync = TileEntityHatRackItemSync;
exports.TilePickingSync = TilePickingSync;
exports.RevengeMarkerSync = RevengeMarkerSync;
exports.RevengeMarkerRemove = RevengeMarkerRemove;
exports.GolfBallLandInCup = GolfBallLandInCup;
exports.ClientFinishConnectingToServer = ClientFinishConnectingToServer;
exports.NpcFishOut = NpcFishOut;
exports.NpcTamper = NpcTamper;
exports.LegacySoundPlay = LegacySoundPlay;
exports.FoodPlatterTryPlacing = FoodPlatterTryPlacing;
exports.PlayerLuckFactorsUpdate = PlayerLuckFactorsUpdate;
exports.PlayerDead = PlayerDead;
exports.CavernMonsterTypeSync = CavernMonsterTypeSync;
exports.NpcBuffRemovalRequest = NpcBuffRemovalRequest;
exports.ClientSyncedInventory = ClientSyncedInventory;
exports.CountsAsHostForGameplaySet = CountsAsHostForGameplaySet;
exports.CreditsOrSlimeTransform = CreditsOrSlimeTransform;
exports.LucyAxeMessage = LucyAxeMessage;
exports.PiggyBankVoidLensUpdate = PiggyBankVoidLensUpdate;
exports.DungeonDefendersEventAttemptSkipWait = DungeonDefendersEventAttemptSkipWait;
exports.HaveDryadDoStardewAnimation = HaveDryadDoStardewAnimation;
exports.ItemDropShimmeredUpdate = ItemDropShimmeredUpdate;
exports.ShimmerEffectOrCoinLuck = ShimmerEffectOrCoinLuck;
exports.LoadoutSwitch = LoadoutSwitch;
exports.ItemDropProtectedUpdate = ItemDropProtectedUpdate;
exports.LazyPacket = LazyPacket;
exports.toBuffer = toBuffer;
exports.serialize = serialize;
exports.toPacketName = toPacketName$1;
/* Packet_Status-TerrariaPacket Not a pure module */
