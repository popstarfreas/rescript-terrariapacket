// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Pervasives = require("rescript/lib/js/pervasives.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Packet_Status$TerrariaPacket = require("./packet/Packet_Status.js");
var Packet_NpcUpdate$TerrariaPacket = require("./packet/Packet_NpcUpdate.js");
var Packet_WorldInfo$TerrariaPacket = require("./packet/Packet_WorldInfo.js");
var Packet_Disconnect$TerrariaPacket = require("./packet/Packet_Disconnect.js");
var Packet_PlayerInfo$TerrariaPacket = require("./packet/Packet_PlayerInfo.js");
var Packet_PlayerMana$TerrariaPacket = require("./packet/Packet_PlayerMana.js");
var Packet_PlayerSpawn$TerrariaPacket = require("./packet/Packet_PlayerSpawn.js");
var Packet_PlayerActive$TerrariaPacket = require("./packet/Packet_PlayerActive.js");
var Packet_PlayerHealth$TerrariaPacket = require("./packet/Packet_PlayerHealth.js");
var Packet_NetModuleLoad$TerrariaPacket = require("./packet/Packet_NetModuleLoad.js");
var Packet_PlayerSlotSet$TerrariaPacket = require("./packet/Packet_PlayerSlotSet.js");
var Packet_ConnectRequest$TerrariaPacket = require("./packet/Packet_ConnectRequest.js");
var Packet_ItemDropUpdate$TerrariaPacket = require("./packet/Packet_ItemDropUpdate.js");
var Packet_ProjectileSync$TerrariaPacket = require("./packet/Packet_ProjectileSync.js");
var Packet_TileSquareSend$TerrariaPacket = require("./packet/Packet_TileSquareSend.js");
var Packet_DimensionsUpdate$TerrariaPacket = require("./packet/Packet_DimensionsUpdate.js");
var Packet_WorldDataRequest$TerrariaPacket = require("./packet/Packet_WorldDataRequest.js");
var Packet_ProjectileDestroy$TerrariaPacket = require("./packet/Packet_ProjectileDestroy.js");
var Packet_PlayerInventorySlot$TerrariaPacket = require("./packet/Packet_PlayerInventorySlot.js");
var Packet_InitialTileSectionsRequest$TerrariaPacket = require("./packet/Packet_InitialTileSectionsRequest.js");

function toBuffer(packet, _fromServer) {
  switch (packet.TAG | 0) {
    case /* ConnectRequest */0 :
        return Caml_option.some(Packet_ConnectRequest$TerrariaPacket.toBuffer(packet._0));
    case /* Disconnect */1 :
        return Caml_option.some(Packet_Disconnect$TerrariaPacket.toBuffer(packet._0));
    case /* PlayerSlotSet */2 :
        return Caml_option.some(Packet_PlayerSlotSet$TerrariaPacket.toBuffer(packet._0));
    case /* PlayerInfo */3 :
        return Caml_option.some(Packet_PlayerInfo$TerrariaPacket.toBuffer(packet._0));
    case /* PlayerInventorySlot */4 :
        return Caml_option.some(Packet_PlayerInventorySlot$TerrariaPacket.toBuffer(packet._0));
    case /* WorldDataRequest */5 :
        return Caml_option.some(Packet_WorldDataRequest$TerrariaPacket.toBuffer(packet._0));
    case /* WorldInfo */6 :
        return Caml_option.some(Packet_WorldInfo$TerrariaPacket.toBuffer(packet._0));
    case /* InitialTileSectionsRequest */7 :
        return Caml_option.some(Packet_InitialTileSectionsRequest$TerrariaPacket.toBuffer(packet._0));
    case /* Status */8 :
        return Caml_option.some(Packet_Status$TerrariaPacket.toBuffer(packet._0));
    case /* PlayerSpawn */11 :
        return Caml_option.some(Packet_PlayerSpawn$TerrariaPacket.toBuffer(packet._0));
    case /* PlayerActive */13 :
        return Caml_option.some(Packet_PlayerActive$TerrariaPacket.toBuffer(packet._0));
    case /* PlayerHealth */14 :
        return Caml_option.some(Packet_PlayerHealth$TerrariaPacket.toBuffer(packet._0));
    case /* TileSquareSend */18 :
        return Caml_option.some(Packet_TileSquareSend$TerrariaPacket.toBuffer(packet._0));
    case /* ItemDropUpdate */19 :
        return Caml_option.some(Packet_ItemDropUpdate$TerrariaPacket.toBuffer(packet._0));
    case /* NpcUpdate */21 :
        return Caml_option.some(Packet_NpcUpdate$TerrariaPacket.toBuffer(packet._0));
    case /* ProjectileSync */23 :
        return Caml_option.some(Packet_ProjectileSync$TerrariaPacket.toBuffer(packet._0));
    case /* ProjectileDestroy */25 :
        return Caml_option.some(Packet_ProjectileDestroy$TerrariaPacket.toBuffer(packet._0));
    case /* PlayerMana */38 :
        return Caml_option.some(Packet_PlayerMana$TerrariaPacket.toBuffer(packet._0));
    case /* DimensionsUpdate */62 :
        return Caml_option.some(Packet_DimensionsUpdate$TerrariaPacket.toBuffer(packet._0));
    case /* NetModuleLoad */77 :
        return Caml_option.some(Packet_NetModuleLoad$TerrariaPacket.toBuffer(packet._0));
    default:
      return ;
  }
}

function serialize(parsed, fromServer) {
  if (parsed.TAG === /* ShouldSerialize */0) {
    return toBuffer(parsed._0, fromServer);
  } else {
    return Caml_option.some(parsed._1);
  }
}

function toPacketName(packet) {
  switch (packet.TAG | 0) {
    case /* ConnectRequest */0 :
        return "ConnectRequest";
    case /* Disconnect */1 :
        return "Disconnect";
    case /* PlayerSlotSet */2 :
        return "PlayerSlotSet";
    case /* PlayerInfo */3 :
        return "PlayerInfo";
    case /* PlayerInventorySlot */4 :
        return "PlayerInventorySlot";
    case /* WorldDataRequest */5 :
        return "WorldDataRequest";
    case /* WorldInfo */6 :
        return "WorldInfo";
    case /* InitialTileSectionsRequest */7 :
        return "InitialTileSectionsRequest";
    case /* Status */8 :
        return "Status";
    case /* TileSectionSend */9 :
        return "TileSectionSend";
    case /* TileSectionFrame */10 :
        return "TileSectionFrame";
    case /* PlayerSpawn */11 :
        return "PlayerSpawn";
    case /* PlayerUpdate */12 :
        return "PlayerUpdate";
    case /* PlayerActive */13 :
        return "PlayerActive";
    case /* PlayerHealth */14 :
        return "PlayerHealth";
    case /* TileModify */15 :
        return "TileModify";
    case /* TimeSet */16 :
        return "TimeSet";
    case /* DoorUse */17 :
        return "DoorUse";
    case /* TileSquareSend */18 :
        return "TileSquareSend";
    case /* ItemDropUpdate */19 :
        return "ItemDropUpdate";
    case /* ItemOwner */20 :
        return "ItemOwner";
    case /* NpcUpdate */21 :
        var match = packet._0;
        return "NpcUpdate(npcSlotId: " + String(match.npcSlotId) + ", npcTypeId: " + String(match.npcTypeId) + ", x: " + String(match.x) + ", y: " + String(match.y) + ", vx: " + String(match.vx) + ", vy: " + String(match.vy) + ", target: " + String(match.target) + ", directionX: " + Pervasives.string_of_bool(match.directionX) + ", directionY: " + Pervasives.string_of_bool(match.directionY) + ")";
    case /* NpcItemStrike */22 :
        return "NpcItemStrike";
    case /* ProjectileSync */23 :
        var match$1 = packet._0;
        return "ProjectileSync(projectileId: " + String(match$1.projectileId) + ", x: " + String(match$1.x) + ", y: " + String(match$1.y) + ", vx: " + String(match$1.vx) + ", vy: " + String(match$1.vy) + ", owner: " + String(match$1.owner) + ", projectileType: " + String(match$1.projectileType) + ", damage: " + Belt_Option.mapWithDefault(match$1.damage, "None", (function (damage) {
                      return String(damage);
                    })) + ", knockback: " + Belt_Option.mapWithDefault(match$1.knockback, "None", (function (knockback) {
                      return String(knockback);
                    })) + ")";
    case /* NpcStrike */24 :
        return "NpcStrike";
    case /* ProjectileDestroy */25 :
        var projectileDestroy = packet._0;
        return "ProjectileDestroy(projectileId: " + String(projectileDestroy.projectileId) + ", owner: " + String(projectileDestroy.owner) + ")";
    case /* PvpToggle */26 :
        return "PvpToggle";
    case /* ChestOpen */27 :
        return "ChestOpen";
    case /* ChestItem */28 :
        return "ChestItem";
    case /* ActiveContainerSync */29 :
        return "ActiveContainerSync";
    case /* ChestPlace */30 :
        return "ChestPlace";
    case /* HealEffect */31 :
        return "HealEffect";
    case /* Zones */32 :
        return "Zones";
    case /* PasswordRequired */33 :
        return "PasswordRequired";
    case /* PasswordSend */34 :
        return "PasswordSend";
    case /* ItemOwnerRemove */35 :
        return "ItemOwnerRemove";
    case /* NpcTalk */36 :
        return "NpcTalk";
    case /* PlayerAnimation */37 :
        return "PlayerAnimation";
    case /* PlayerMana */38 :
        return "PlayerMana";
    case /* ManaEffect */39 :
        return "ManaEffect";
    case /* PlayerTeam */40 :
        return "PlayerTeam";
    case /* SignRead */41 :
        return "SignRead";
    case /* SignNew */42 :
        return "SignNew";
    case /* LiquidSet */43 :
        return "LiquidSet";
    case /* PlayerSpawnSelf */44 :
        return "PlayerSpawnSelf";
    case /* PlayerBuffsSet */45 :
        return "PlayerBuffsSet";
    case /* NpcSpecialEffect */46 :
        return "NpcSpecialEffect";
    case /* ChestUnlock */47 :
        return "ChestUnlock";
    case /* NpcBuffAdd */48 :
        return "NpcBuffAdd";
    case /* NpcBuffUpdate */49 :
        return "NpcBuffUpdate";
    case /* PlayerBuffAdd */50 :
        return "PlayerBuffAdd";
    case /* NpcNameUpdate */51 :
        return "NpcNameUpdate";
    case /* GoodEvilUpdate */52 :
        return "GoodEvilUpdate";
    case /* HarpPlay */53 :
        return "HarpPlay";
    case /* SwitchHit */54 :
        return "SwitchHit";
    case /* NpcHomeUpdate */55 :
        return "NpcHomeUpdate";
    case /* BossOrInvasionSpawn */56 :
        return "BossOrInvasionSpawn";
    case /* PlayerDodge */57 :
        return "PlayerDodge";
    case /* PaintTile */58 :
        return "PaintTile";
    case /* PaintWall */59 :
        return "PaintWall";
    case /* Teleport */60 :
        return "Teleport";
    case /* PlayerHealOther */61 :
        return "PlayerHealOther";
    case /* DimensionsUpdate */62 :
        return "DimensionsUpdate";
    case /* ClientUuid */63 :
        return "ClientUuid";
    case /* ChestName */64 :
        return "ChestName";
    case /* CatchNpc */65 :
        return "CatchNpc";
    case /* ReleaseNpc */66 :
        return "ReleaseNpc";
    case /* TravellingMerchantInventory */67 :
        return "TravellingMerchantInventory";
    case /* TeleportationPotion */68 :
        return "TeleportationPotion";
    case /* AnglerQuest */69 :
        return "AnglerQuest";
    case /* AnglerQuestComplete */70 :
        return "AnglerQuestComplete";
    case /* AnglerQuestsCompletedAmount */71 :
        return "AnglerQuestsCompletedAmount";
    case /* TemporaryAnimationCreate */72 :
        return "TemporaryAnimationCreate";
    case /* InvasionProgressReport */73 :
        return "InvasionProgressReport";
    case /* ObjectPlace */74 :
        return "ObjectPlace";
    case /* PlayerChestIndexSync */75 :
        return "PlayerChestIndexSync";
    case /* CombatNumberCreate */76 :
        return "CombatNumberCreate";
    case /* NetModuleLoad */77 :
        var netModuleLoad = packet._0;
        var tmp;
        switch (netModuleLoad.TAG | 0) {
          case /* Liquid */0 :
              tmp = "Liquid";
              break;
          case /* ClientText */1 :
              tmp = "ClientText(" + netModuleLoad._1 + ")";
              break;
          case /* ServerText */2 :
              tmp = "ServerText(" + netModuleLoad._1.text + ")";
              break;
          case /* Ping */3 :
              tmp = "Ping";
              break;
          case /* Ambience */4 :
              tmp = "Ambience";
              break;
          case /* Bestiary */5 :
              tmp = "Bestiary";
              break;
          case /* CreativeUnlocks */6 :
              tmp = "CreativeUnlocks";
              break;
          case /* CreativePower */7 :
              tmp = "CreativePower";
              break;
          case /* CreativeUnlocksPlayerReport */8 :
              tmp = "CreativeUnlocksPlayerReport";
              break;
          case /* TeleportPylon */9 :
              tmp = "TeleportPylon";
              break;
          case /* Particles */10 :
              tmp = "Particles";
              break;
          case /* CreativePowerPermissions */11 :
              tmp = "CreativePowerPermissions";
              break;
          
        }
        return "NetModuleLoad(" + tmp + ")";
    case /* NpcKillCount */78 :
        return "NpcKillCount";
    case /* PlayerStealth */79 :
        return "PlayerStealth";
    case /* ItemForceIntoNearestChest */80 :
        return "ItemForceIntoNearestChest";
    case /* TileEntityUpdate */81 :
        return "TileEntityUpdate";
    case /* TileEntityPlace */82 :
        return "TileEntityPlace";
    case /* ItemDropModify */83 :
        return "ItemDropModify";
    case /* ItemFramePlace */84 :
        return "ItemFramePlace";
    case /* ItemDropInstancedUpdate */85 :
        return "ItemDropInstancedUpdate";
    case /* EmoteBubble */86 :
        return "EmoteBubble";
    case /* ExtraValueSync */87 :
        return "ExtraValueSync";
    case /* SocialHandshake */88 :
        return "SocialHandshake";
    case /* Unused */89 :
        return "Unused";
    case /* PortalKill */90 :
        return "PortalKill";
    case /* PlayerTeleportPortal */91 :
        return "PlayerTeleportPortal";
    case /* NpcKilledNotification */92 :
        return "NpcKilledNotification";
    case /* EventNotification */93 :
        return "EventNotification";
    case /* MinionTargetUpdate */94 :
        return "MinionTargetUpdate";
    case /* NpcTeleportPortal */95 :
        return "NpcTeleportPortal";
    case /* ShieldStrengthsUpdate */96 :
        return "ShieldStrengthsUpdate";
    case /* NebulaLevelUp */97 :
        return "NebulaLevelUp";
    case /* MoonLordCountdown */98 :
        return "MoonLordCountdown";
    case /* NpcShopItem */99 :
        return "NpcShopItem";
    case /* GemLockToggle */100 :
        return "GemLockToggle";
    case /* SmokePoof */101 :
        return "SmokePoof";
    case /* ChatMessageSmart */102 :
        return "ChatMessageSmart";
    case /* WiredCannonShot */103 :
        return "WiredCannonShot";
    case /* MassWireOperation */104 :
        return "MassWireOperation";
    case /* MassWireOperationPay */105 :
        return "MassWireOperationPay";
    case /* PartyToggle */106 :
        return "PartyToggle";
    case /* TreeGrowFx */107 :
        return "TreeGrowFx";
    case /* CrystalInvasionStart */108 :
        return "CrystalInvasionStart";
    case /* CrystalInvasionWipeAll */109 :
        return "CrystalInvasionWipeAll";
    case /* MinionAttackTargetUpdate */110 :
        return "MinionAttackTargetUpdate";
    case /* CrystalInvasionSendWaitTime */111 :
        return "CrystalInvasionSendWaitTime";
    case /* PlayerDamage */112 :
        return "PlayerDamage";
    case /* PlayerDeath */113 :
        return "PlayerDeath";
    case /* CombatTextCreate */114 :
        return "CombatTextCreate";
    case /* Emoji */115 :
        return "Emoji";
    case /* TileEntityDisplayDollItemSync */116 :
        return "TileEntityDisplayDollItemSync";
    case /* TileEntityInteractionRequest */117 :
        return "TileEntityInteractionRequest";
    case /* WeaponsRackTryPlacing */118 :
        return "WeaponsRackTryPlacing";
    case /* TileEntityHatRackItemSync */119 :
        return "TileEntityHatRackItemSync";
    case /* TilePickingSync */120 :
        return "TilePickingSync";
    case /* RevengeMarkerSync */121 :
        return "RevengeMarkerSync";
    case /* RevengeMarkerRemove */122 :
        return "RevengeMarkerRemove";
    case /* GolfBallLandInCup */123 :
        return "GolfBallLandInCup";
    case /* ClientFinishConnectingToServer */124 :
        return "ClientFinishConnectingToServer";
    case /* NpcFishOut */125 :
        return "NpcFishOut";
    case /* NpcTamper */126 :
        return "NpcTamper";
    case /* LegacySoundPlay */127 :
        return "LegacySoundPlay";
    case /* FoodPlatterTryPlacing */128 :
        return "FoodPlatterTryPlacing";
    case /* PlayerLuckFactorsUpdate */129 :
        return "PlayerLuckFactorsUpdate";
    case /* PlayerDead */130 :
        return "PlayerDead";
    case /* CavernMonsterTypeSync */131 :
        return "CavernMonsterTypeSync";
    case /* NpcBuffRemovalRequest */132 :
        return "NpcBuffRemovalRequest";
    case /* ClientSyncedInventory */133 :
        return "ClientSyncedInventory";
    case /* CountsAsHostForGameplaySet */134 :
        return "CountsAsHostForGameplaySet";
    
  }
}

var ConnectRequest;

var Disconnect;

var PlayerSlotSet;

var PlayerInfo;

var PlayerInventorySlot;

var WorldDataRequest;

var WorldInfo;

var InitialTileSectionsRequest;

var Status;

var TileSectionSend;

var TileSectionFrame;

var PlayerSpawn;

var PlayerUpdate;

var PlayerActive;

var PlayerHealth;

var TileModify;

var TimeSet;

var DoorUse;

var TileSquareSend;

var ItemDropUpdate;

var ItemOwner;

var NpcUpdate;

var NpcItemStrike;

var ProjectileSync;

var NpcStrike;

var ProjectileDestroy;

var PvpToggle;

var ChestOpen;

var ChestItem;

var ActiveContainerSync;

var ChestPlace;

var HealEffect;

var Zones;

var PasswordRequired;

var PasswordSend;

var ItemOwnerRemove;

var NpcTalk;

var PlayerAnimation;

var PlayerMana;

var ManaEffect;

var PlayerTeam;

var SignRead;

var SignNew;

var LiquidSet;

var PlayerSpawnSelf;

var PlayerBuffsSet;

var NpcSpecialEffect;

var ChestUnlock;

var NpcBuffAdd;

var NpcBuffUpdate;

var PlayerBuffAdd;

var NpcNameUpdate;

var GoodEvilUpdate;

var HarpPlay;

var SwitchHit;

var NpcHomeUpdate;

var BossOrInvasionSpawn;

var PlayerDodge;

var PaintTile;

var PaintWall;

var Teleport;

var PlayerHealOther;

var DimensionsUpdate;

var ClientUuid;

var ChestName;

var CatchNpc;

var ReleaseNpc;

var TravellingMerchantInventory;

var TeleportationPotion;

var AnglerQuest;

var AnglerQuestComplete;

var AnglerQuestsCompletedAmount;

var TemporaryAnimationCreate;

var InvasionProgressReport;

var ObjectPlace;

var PlayerChestIndexSync;

var CombatNumberCreate;

var NetModuleLoad;

var NpcKillCount;

var PlayerStealth;

var ItemForceIntoNearestChest;

var TileEntityUpdate;

var TileEntityPlace;

var ItemDropModify;

var ItemFramePlace;

var ItemDropInstancedUpdate;

var EmoteBubble;

var ExtraValueSync;

var SocialHandshake;

var Unused;

var PortalKill;

var PlayerTeleportPortal;

var NpcKilledNotification;

var EventNotification;

var MinionTargetUpdate;

var NpcTeleportPortal;

var ShieldStrengthsUpdate;

var NebulaLevelUp;

var MoonLordCountdown;

var NpcShopItem;

var GemLockToggle;

var SmokePoof;

var ChatMessageSmart;

var WiredCannonShot;

var MassWireOperation;

var MassWireOperationPay;

var PartyToggle;

var TreeGrowFx;

var CrystalInvasionStart;

var CrystalInvasionWipeAll;

var MinionAttackTargetUpdate;

var CrystalInvasionSendWaitTime;

var PlayerDamage;

var PlayerDeath;

var CombatTextCreate;

var Emoji;

var TileEntityDisplayDollItemSync;

var TileEntityInteractionRequest;

var WeaponsRackTryPlacing;

var TileEntityHatRackItemSync;

var TilePickingSync;

var RevengeMarkerSync;

var RevengeMarkerRemove;

var GolfBallLandInCup;

var ClientFinishConnectingToServer;

var NpcFishOut;

var NpcTamper;

var LegacySoundPlay;

var FoodPlatterTryPlacing;

var PlayerLuckFactorsUpdate;

var PlayerDead;

var CavernMonsterTypeSync;

var NpcBuffRemovalRequest;

var ClientSyncedInventory;

var CountsAsHostForGameplaySet;

exports.ConnectRequest = ConnectRequest;
exports.Disconnect = Disconnect;
exports.PlayerSlotSet = PlayerSlotSet;
exports.PlayerInfo = PlayerInfo;
exports.PlayerInventorySlot = PlayerInventorySlot;
exports.WorldDataRequest = WorldDataRequest;
exports.WorldInfo = WorldInfo;
exports.InitialTileSectionsRequest = InitialTileSectionsRequest;
exports.Status = Status;
exports.TileSectionSend = TileSectionSend;
exports.TileSectionFrame = TileSectionFrame;
exports.PlayerSpawn = PlayerSpawn;
exports.PlayerUpdate = PlayerUpdate;
exports.PlayerActive = PlayerActive;
exports.PlayerHealth = PlayerHealth;
exports.TileModify = TileModify;
exports.TimeSet = TimeSet;
exports.DoorUse = DoorUse;
exports.TileSquareSend = TileSquareSend;
exports.ItemDropUpdate = ItemDropUpdate;
exports.ItemOwner = ItemOwner;
exports.NpcUpdate = NpcUpdate;
exports.NpcItemStrike = NpcItemStrike;
exports.ProjectileSync = ProjectileSync;
exports.NpcStrike = NpcStrike;
exports.ProjectileDestroy = ProjectileDestroy;
exports.PvpToggle = PvpToggle;
exports.ChestOpen = ChestOpen;
exports.ChestItem = ChestItem;
exports.ActiveContainerSync = ActiveContainerSync;
exports.ChestPlace = ChestPlace;
exports.HealEffect = HealEffect;
exports.Zones = Zones;
exports.PasswordRequired = PasswordRequired;
exports.PasswordSend = PasswordSend;
exports.ItemOwnerRemove = ItemOwnerRemove;
exports.NpcTalk = NpcTalk;
exports.PlayerAnimation = PlayerAnimation;
exports.PlayerMana = PlayerMana;
exports.ManaEffect = ManaEffect;
exports.PlayerTeam = PlayerTeam;
exports.SignRead = SignRead;
exports.SignNew = SignNew;
exports.LiquidSet = LiquidSet;
exports.PlayerSpawnSelf = PlayerSpawnSelf;
exports.PlayerBuffsSet = PlayerBuffsSet;
exports.NpcSpecialEffect = NpcSpecialEffect;
exports.ChestUnlock = ChestUnlock;
exports.NpcBuffAdd = NpcBuffAdd;
exports.NpcBuffUpdate = NpcBuffUpdate;
exports.PlayerBuffAdd = PlayerBuffAdd;
exports.NpcNameUpdate = NpcNameUpdate;
exports.GoodEvilUpdate = GoodEvilUpdate;
exports.HarpPlay = HarpPlay;
exports.SwitchHit = SwitchHit;
exports.NpcHomeUpdate = NpcHomeUpdate;
exports.BossOrInvasionSpawn = BossOrInvasionSpawn;
exports.PlayerDodge = PlayerDodge;
exports.PaintTile = PaintTile;
exports.PaintWall = PaintWall;
exports.Teleport = Teleport;
exports.PlayerHealOther = PlayerHealOther;
exports.DimensionsUpdate = DimensionsUpdate;
exports.ClientUuid = ClientUuid;
exports.ChestName = ChestName;
exports.CatchNpc = CatchNpc;
exports.ReleaseNpc = ReleaseNpc;
exports.TravellingMerchantInventory = TravellingMerchantInventory;
exports.TeleportationPotion = TeleportationPotion;
exports.AnglerQuest = AnglerQuest;
exports.AnglerQuestComplete = AnglerQuestComplete;
exports.AnglerQuestsCompletedAmount = AnglerQuestsCompletedAmount;
exports.TemporaryAnimationCreate = TemporaryAnimationCreate;
exports.InvasionProgressReport = InvasionProgressReport;
exports.ObjectPlace = ObjectPlace;
exports.PlayerChestIndexSync = PlayerChestIndexSync;
exports.CombatNumberCreate = CombatNumberCreate;
exports.NetModuleLoad = NetModuleLoad;
exports.NpcKillCount = NpcKillCount;
exports.PlayerStealth = PlayerStealth;
exports.ItemForceIntoNearestChest = ItemForceIntoNearestChest;
exports.TileEntityUpdate = TileEntityUpdate;
exports.TileEntityPlace = TileEntityPlace;
exports.ItemDropModify = ItemDropModify;
exports.ItemFramePlace = ItemFramePlace;
exports.ItemDropInstancedUpdate = ItemDropInstancedUpdate;
exports.EmoteBubble = EmoteBubble;
exports.ExtraValueSync = ExtraValueSync;
exports.SocialHandshake = SocialHandshake;
exports.Unused = Unused;
exports.PortalKill = PortalKill;
exports.PlayerTeleportPortal = PlayerTeleportPortal;
exports.NpcKilledNotification = NpcKilledNotification;
exports.EventNotification = EventNotification;
exports.MinionTargetUpdate = MinionTargetUpdate;
exports.NpcTeleportPortal = NpcTeleportPortal;
exports.ShieldStrengthsUpdate = ShieldStrengthsUpdate;
exports.NebulaLevelUp = NebulaLevelUp;
exports.MoonLordCountdown = MoonLordCountdown;
exports.NpcShopItem = NpcShopItem;
exports.GemLockToggle = GemLockToggle;
exports.SmokePoof = SmokePoof;
exports.ChatMessageSmart = ChatMessageSmart;
exports.WiredCannonShot = WiredCannonShot;
exports.MassWireOperation = MassWireOperation;
exports.MassWireOperationPay = MassWireOperationPay;
exports.PartyToggle = PartyToggle;
exports.TreeGrowFx = TreeGrowFx;
exports.CrystalInvasionStart = CrystalInvasionStart;
exports.CrystalInvasionWipeAll = CrystalInvasionWipeAll;
exports.MinionAttackTargetUpdate = MinionAttackTargetUpdate;
exports.CrystalInvasionSendWaitTime = CrystalInvasionSendWaitTime;
exports.PlayerDamage = PlayerDamage;
exports.PlayerDeath = PlayerDeath;
exports.CombatTextCreate = CombatTextCreate;
exports.Emoji = Emoji;
exports.TileEntityDisplayDollItemSync = TileEntityDisplayDollItemSync;
exports.TileEntityInteractionRequest = TileEntityInteractionRequest;
exports.WeaponsRackTryPlacing = WeaponsRackTryPlacing;
exports.TileEntityHatRackItemSync = TileEntityHatRackItemSync;
exports.TilePickingSync = TilePickingSync;
exports.RevengeMarkerSync = RevengeMarkerSync;
exports.RevengeMarkerRemove = RevengeMarkerRemove;
exports.GolfBallLandInCup = GolfBallLandInCup;
exports.ClientFinishConnectingToServer = ClientFinishConnectingToServer;
exports.NpcFishOut = NpcFishOut;
exports.NpcTamper = NpcTamper;
exports.LegacySoundPlay = LegacySoundPlay;
exports.FoodPlatterTryPlacing = FoodPlatterTryPlacing;
exports.PlayerLuckFactorsUpdate = PlayerLuckFactorsUpdate;
exports.PlayerDead = PlayerDead;
exports.CavernMonsterTypeSync = CavernMonsterTypeSync;
exports.NpcBuffRemovalRequest = NpcBuffRemovalRequest;
exports.ClientSyncedInventory = ClientSyncedInventory;
exports.CountsAsHostForGameplaySet = CountsAsHostForGameplaySet;
exports.toBuffer = toBuffer;
exports.serialize = serialize;
exports.toPacketName = toPacketName;
/* Packet_Status-TerrariaPacket Not a pure module */
