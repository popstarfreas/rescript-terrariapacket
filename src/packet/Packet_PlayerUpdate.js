// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var BitFlags$TerrariaPacket = require("../BitFlags.js");
var PacketType$TerrariaPacket = require("../PacketType.js");
var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;

function readByte(prim) {
  return prim.readByte();
}

function readSingle(prim) {
  return prim.readSingle();
}

function readString(prim) {
  return prim.readString();
}

function parse(payload) {
  var reader = new Packetreader(payload);
  var playerId = reader.readByte();
  var controlFlags = BitFlags$TerrariaPacket.fromByte(reader.readByte());
  var miscFlags1 = BitFlags$TerrariaPacket.fromByte(reader.readByte());
  var miscFlags2 = BitFlags$TerrariaPacket.fromByte(reader.readByte());
  var miscFlags3 = BitFlags$TerrariaPacket.fromByte(reader.readByte());
  var control_isHoldingUp = BitFlags$TerrariaPacket.flag1(controlFlags);
  var control_isHoldingDown = BitFlags$TerrariaPacket.flag2(controlFlags);
  var control_isHoldingLeft = BitFlags$TerrariaPacket.flag3(controlFlags);
  var control_isHoldingRight = BitFlags$TerrariaPacket.flag4(controlFlags);
  var control_isHoldingJump = BitFlags$TerrariaPacket.flag5(controlFlags);
  var control_isHoldingItemUse = BitFlags$TerrariaPacket.flag6(controlFlags);
  var control = {
    isHoldingUp: control_isHoldingUp,
    isHoldingDown: control_isHoldingDown,
    isHoldingLeft: control_isHoldingLeft,
    isHoldingRight: control_isHoldingRight,
    isHoldingJump: control_isHoldingJump,
    isHoldingItemUse: control_isHoldingItemUse
  };
  var direction = BitFlags$TerrariaPacket.flag7(controlFlags) ? /* Right */1 : /* Left */0;
  var pulleyDirection = BitFlags$TerrariaPacket.flag1(miscFlags1) ? (
      BitFlags$TerrariaPacket.flag2(miscFlags1) ? /* Two */1 : /* One */0
    ) : undefined;
  var vortexStealthActive = BitFlags$TerrariaPacket.flag4(miscFlags1);
  var gravityDirection = BitFlags$TerrariaPacket.flag5(miscFlags1) ? /* Normal */0 : /* Inverted */1;
  var shouldGuard = BitFlags$TerrariaPacket.flag6(miscFlags1);
  var ghost = BitFlags$TerrariaPacket.flag7(miscFlags1);
  var selectedItem = reader.readByte();
  var position_x = reader.readSingle();
  var position_y = reader.readSingle();
  var position = {
    x: position_x,
    y: position_y
  };
  var velocity = BitFlags$TerrariaPacket.flag3(miscFlags1) ? ({
        x: reader.readSingle(),
        y: reader.readSingle()
      }) : undefined;
  var potionOfReturn = BitFlags$TerrariaPacket.flag7(miscFlags2) ? ({
        originalUsePosition: {
          x: reader.readSingle(),
          y: reader.readSingle()
        },
        homePosition: {
          x: reader.readSingle(),
          y: reader.readSingle()
        }
      }) : undefined;
  var tryKeepingHoveringUp = BitFlags$TerrariaPacket.flag1(miscFlags2);
  var isVoidVaultEnabled = BitFlags$TerrariaPacket.flag2(miscFlags2);
  var isSitting = BitFlags$TerrariaPacket.flag3(miscFlags2);
  var hasFinishedAnyDd2Event = BitFlags$TerrariaPacket.flag4(miscFlags2);
  var isPettingAnimal = BitFlags$TerrariaPacket.flag5(miscFlags2);
  var isTheAnimalBeingPetSmall = BitFlags$TerrariaPacket.flag6(miscFlags2);
  var tryKeepingHoveringDown = BitFlags$TerrariaPacket.flag8(miscFlags2);
  var isSleeping = BitFlags$TerrariaPacket.flag1(miscFlags3);
  return {
          playerId: playerId,
          control: control,
          direction: direction,
          pulleyDirection: pulleyDirection,
          vortexStealthActive: vortexStealthActive,
          gravityDirection: gravityDirection,
          shouldGuard: shouldGuard,
          ghost: ghost,
          selectedItem: selectedItem,
          position: position,
          velocity: velocity,
          potionOfReturn: potionOfReturn,
          tryKeepingHoveringUp: tryKeepingHoveringUp,
          isVoidVaultEnabled: isVoidVaultEnabled,
          isSitting: isSitting,
          hasFinishedAnyDd2Event: hasFinishedAnyDd2Event,
          isPettingAnimal: isPettingAnimal,
          isTheAnimalBeingPetSmall: isTheAnimalBeingPetSmall,
          tryKeepingHoveringDown: tryKeepingHoveringDown,
          isSleeping: isSleeping
        };
}

var Decode = {
  readByte: readByte,
  readSingle: readSingle,
  readString: readString,
  parse: parse
};

function packString(prim0, prim1) {
  return prim0.packString(prim1);
}

function data(prim) {
  return prim.data;
}

function toBuffer(self) {
  return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt(/* PlayerUpdate */12)).data;
}

var Encode = {
  packString: packString,
  setType: ManagedPacketWriter$PacketFactory.setType,
  data: data,
  toBuffer: toBuffer
};

exports.Decode = Decode;
exports.Encode = Encode;
exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
