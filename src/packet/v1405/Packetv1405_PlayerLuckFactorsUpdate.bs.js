// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var PacketType$TerrariaPacket = require("../../PacketType.bs.js");
var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;

function readInt16(prim) {
  return prim.readInt16();
}

function readInt32(prim) {
  return prim.readInt32();
}

function readByte(prim) {
  return prim.readByte();
}

function readSingle(prim) {
  return prim.readSingle();
}

function parse(payload) {
  var reader = new Packetreader(payload);
  var player = reader.readByte();
  var ladyBugLuckTimeLeft = reader.readInt32();
  var torchLuck = reader.readSingle();
  var luckPotion = reader.readByte();
  var hasGardenGnomeNearby = reader.readByte() === 1;
  return {
          playerId: player,
          ladyBugLuckTimeLeft: ladyBugLuckTimeLeft,
          torchLuck: torchLuck,
          luckPotion: luckPotion,
          hasGardenGnomeNearby: hasGardenGnomeNearby
        };
}

var Decode = {
  readInt16: readInt16,
  readInt32: readInt32,
  readByte: readByte,
  readSingle: readSingle,
  parse: parse
};

function packByte(prim0, prim1) {
  return prim0.packByte(prim1);
}

function packInt16(prim0, prim1) {
  return prim0.packInt16(prim1);
}

function packInt32(prim0, prim1) {
  return prim0.packInt32(prim1);
}

function packSingle(prim0, prim1) {
  return prim0.packSingle(prim1);
}

function data(prim) {
  return prim.data;
}

function toBuffer(self) {
  return ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt("PlayerLuckFactorsUpdate")).packByte(self.playerId).packInt32(self.ladyBugLuckTimeLeft).packSingle(self.torchLuck).packByte(self.luckPotion).packByte(self.hasGardenGnomeNearby ? 1 : 0).data;
}

var Encode = {
  packByte: packByte,
  packInt16: packInt16,
  packInt32: packInt32,
  packSingle: packSingle,
  setType: ManagedPacketWriter$PacketFactory.setType,
  data: data,
  toBuffer: toBuffer
};

function toLatest(self) {
  return {
          playerId: self.playerId,
          ladyBugLuckTimeLeft: self.ladyBugLuckTimeLeft,
          torchLuck: self.torchLuck,
          luckPotion: self.luckPotion,
          hasGardenGnomeNearby: self.hasGardenGnomeNearby,
          equipmentBasedLuckBonus: 0.0,
          coinLuck: 0.0
        };
}

function fromLatest(latest) {
  return {
          playerId: latest.playerId,
          ladyBugLuckTimeLeft: latest.ladyBugLuckTimeLeft,
          torchLuck: latest.torchLuck,
          luckPotion: latest.luckPotion,
          hasGardenGnomeNearby: latest.hasGardenGnomeNearby
        };
}

exports.Decode = Decode;
exports.Encode = Encode;
exports.parse = parse;
exports.toBuffer = toBuffer;
exports.toLatest = toLatest;
exports.fromLatest = fromLatest;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
