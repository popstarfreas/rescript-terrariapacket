// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Array = require("@rescript/core/src/Core__Array.bs.js");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");
var PacketType$TerrariaPacket = require("../../PacketType.bs.js");
var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;

function readUInt16(prim) {
  return prim.readUInt16();
}

function readInt16(prim) {
  return prim.readInt16();
}

function readByte(prim) {
  return prim.readByte();
}

function parse(payload) {
  var reader = new Packetreader(payload);
  var npcId = reader.readInt16();
  var buffs = [];
  var buffTimes = [];
  for(var _i = 1; _i <= 5; ++_i){
    buffs.push(reader.readUInt16());
    buffTimes.push(reader.readInt16());
  }
  return {
          npcId: npcId,
          buffs: buffs,
          buffTimes: buffTimes
        };
}

var Decode = {
  readUInt16: readUInt16,
  readInt16: readInt16,
  readByte: readByte,
  parse: parse
};

function packByte(prim0, prim1) {
  return prim0.packByte(prim1);
}

function packInt16(prim0, prim1) {
  return prim0.packInt16(prim1);
}

function packUInt16(prim0, prim1) {
  return prim0.packUInt16(prim1);
}

function data(prim) {
  return prim.data;
}

function packBuffs(writer, buffs) {
  buffs.forEach(function (buff) {
        writer.packUInt16(buff);
      });
  return writer;
}

function packBuffTimes(writer, buffTimes) {
  buffTimes.forEach(function (buff) {
        writer.packInt16(buff);
      });
  return writer;
}

function toBuffer(self) {
  if (self.buffs.length !== 5) {
    PervasivesU.failwith("Expected 5 buffs, got " + self.buffs.length.toString());
  }
  return packBuffTimes(packBuffs(ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt("NpcBuffUpdate")).packByte(self.npcId), self.buffs), self.buffTimes).data;
}

var Encode = {
  packByte: packByte,
  packInt16: packInt16,
  packUInt16: packUInt16,
  setType: ManagedPacketWriter$PacketFactory.setType,
  data: data,
  packBuffs: packBuffs,
  packBuffTimes: packBuffTimes,
  toBuffer: toBuffer
};

function toLatest(self) {
  if (self.buffs.length !== 5) {
    PervasivesU.failwith("Expected 5 buffs, got " + self.buffs.length.toString());
  }
  var buffs = self.buffs.slice();
  Caml_splice_call.spliceObjApply(buffs, "push", [Core__Array.make(15, 0)]);
  var buffTimes = self.buffTimes.slice();
  Caml_splice_call.spliceObjApply(buffTimes, "push", [Core__Array.make(15, 0)]);
  return {
          npcId: self.npcId,
          buffs: buffs,
          buffTimes: buffTimes
        };
}

function fromLatest(latest) {
  return {
          npcId: latest.npcId,
          buffs: latest.buffs.slice(0, 5),
          buffTimes: latest.buffTimes.slice(0, 5)
        };
}

exports.Decode = Decode;
exports.Encode = Encode;
exports.parse = parse;
exports.toBuffer = toBuffer;
exports.toLatest = toLatest;
exports.fromLatest = fromLatest;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
