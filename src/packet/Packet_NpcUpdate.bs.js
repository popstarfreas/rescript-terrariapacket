// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var BitFlags$TerrariaPacket = require("../BitFlags.bs.js");
var PacketType$TerrariaPacket = require("../PacketType.bs.js");
var ManagedPacketWriter$PacketFactory = require("@popstarfreas/packetfactory/src/ManagedPacketWriter.bs.js");
var Packetreader = require("@popstarfreas/packetfactory/packetreader").default;
var Packetwriter = require("@popstarfreas/packetfactory/packetwriter").default;

function readNpcFlags1(reader) {
  var flags = BitFlags$TerrariaPacket.fromByte(reader.readByte());
  return {
          directionX: BitFlags$TerrariaPacket.flag1(flags),
          directionY: BitFlags$TerrariaPacket.flag2(flags),
          ai0: BitFlags$TerrariaPacket.flag3(flags),
          ai1: BitFlags$TerrariaPacket.flag4(flags),
          ai2: BitFlags$TerrariaPacket.flag5(flags),
          ai3: BitFlags$TerrariaPacket.flag6(flags),
          spriteDirection: BitFlags$TerrariaPacket.flag7(flags),
          lifeMax: BitFlags$TerrariaPacket.flag8(flags)
        };
}

function readNpcFlags2(reader) {
  var flags = BitFlags$TerrariaPacket.fromByte(reader.readByte());
  return {
          statsScaled: BitFlags$TerrariaPacket.flag1(flags),
          spawnedFromStatue: BitFlags$TerrariaPacket.flag2(flags),
          strengthMultiplier: BitFlags$TerrariaPacket.flag3(flags)
        };
}

function parse(payload) {
  var reader = new Packetreader(payload);
  var npcSlotId = reader.readInt16();
  var x = reader.readSingle();
  var y = reader.readSingle();
  var vx = reader.readSingle();
  var vy = reader.readSingle();
  var target = reader.readUInt16();
  var npcFlags1 = readNpcFlags1(reader);
  var npcFlags2 = readNpcFlags2(reader);
  var ai_0 = npcFlags1.ai0 ? reader.readSingle() : undefined;
  var ai_1 = npcFlags1.ai1 ? reader.readSingle() : undefined;
  var ai_2 = npcFlags1.ai2 ? reader.readSingle() : undefined;
  var ai_3 = npcFlags1.ai3 ? reader.readSingle() : undefined;
  var ai = [
    ai_0,
    ai_1,
    ai_2,
    ai_3
  ];
  var npcTypeId = reader.readInt16();
  var playerCountScale = npcFlags2.statsScaled ? reader.readByte() : undefined;
  var strengthMultiplier = npcFlags2.strengthMultiplier ? reader.readSingle() : undefined;
  var life;
  if (npcFlags1.lifeMax) {
    life = "Max";
  } else {
    var lifeBytes = reader.readByte();
    switch (lifeBytes) {
      case 1 :
          life = {
            TAG: "Byte",
            _0: reader.readSByte()
          };
          break;
      case 2 :
          life = {
            TAG: "Int16",
            _0: reader.readInt16()
          };
          break;
      case 0 :
      case 3 :
          life = undefined;
          break;
      case 4 :
          life = {
            TAG: "Int32",
            _0: reader.readInt32()
          };
          break;
      default:
        life = undefined;
    }
  }
  var releaseOwner;
  try {
    releaseOwner = reader.readByte();
  }
  catch (exn){
    releaseOwner = undefined;
  }
  if (life !== undefined) {
    return {
            npcSlotId: npcSlotId,
            npcTypeId: npcTypeId,
            x: x,
            y: y,
            vx: vx,
            vy: vy,
            target: target,
            directionX: npcFlags1.directionX,
            directionY: npcFlags1.directionY,
            ai: ai,
            spriteDirection: npcFlags1.spriteDirection,
            life: life,
            releaseOwner: releaseOwner,
            playerCountScale: playerCountScale,
            strengthMultiplier: strengthMultiplier,
            spawnedFromStatue: npcFlags2.spawnedFromStatue
          };
  }
  
}

function npcFlags1(self) {
  var match = self.ai;
  return BitFlags$TerrariaPacket.toByte(BitFlags$TerrariaPacket.fromFlags(self.directionX, self.directionY, Belt_Option.isSome(match[0]), Belt_Option.isSome(match[1]), Belt_Option.isSome(match[2]), Belt_Option.isSome(match[3]), self.spriteDirection, self.life === "Max"));
}

function npcFlags2(self) {
  return BitFlags$TerrariaPacket.toByte(BitFlags$TerrariaPacket.fromFlags(Belt_Option.isSome(self.playerCountScale), self.spawnedFromStatue, Belt_Option.isSome(self.strengthMultiplier), false, false, false, false, false));
}

function packAi(writer, param) {
  var ai3 = param[3];
  var ai2 = param[2];
  var ai1 = param[1];
  var ai0 = param[0];
  if (ai0 !== undefined) {
    writer.packSingle(ai0);
  }
  if (ai1 !== undefined) {
    writer.packSingle(ai1);
  }
  if (ai2 !== undefined) {
    writer.packSingle(ai2);
  }
  if (ai3 !== undefined) {
    writer.packSingle(ai3);
  }
  return writer;
}

function packPlayerCountScale(writer, playerCountScale) {
  if (playerCountScale !== undefined) {
    return writer.packByte(playerCountScale);
  } else {
    return writer;
  }
}

function packStrengthMultiplier(writer, strengthMultiplier) {
  if (strengthMultiplier !== undefined) {
    return writer.packSingle(strengthMultiplier);
  } else {
    return writer;
  }
}

function packLife(writer, life) {
  if (typeof life !== "object") {
    return writer;
  }
  switch (life.TAG) {
    case "Byte" :
        return writer.packByte(1).packSByte(life._0);
    case "Int16" :
        return writer.packByte(2).packInt16(life._0);
    case "Int32" :
        return writer.packByte(4).packInt32(life._0);
    
  }
}

function packReleaseOwner(writer, releaseOwner) {
  if (releaseOwner !== undefined) {
    return writer.packByte(releaseOwner);
  } else {
    return writer;
  }
}

function toBuffer(self) {
  return packReleaseOwner(packLife(packStrengthMultiplier(packPlayerCountScale(packAi(ManagedPacketWriter$PacketFactory.setType(new Packetwriter(), PacketType$TerrariaPacket.toInt("NpcUpdate")).packInt16(self.npcSlotId).packSingle(self.x).packSingle(self.y).packSingle(self.vx).packSingle(self.vy).packUInt16(self.target).packByte(npcFlags1(self)).packByte(npcFlags2(self)), self.ai).packInt16(self.npcTypeId), self.playerCountScale), self.strengthMultiplier), self.life), self.releaseOwner).data;
}

exports.parse = parse;
exports.toBuffer = toBuffer;
/* @popstarfreas/packetfactory/packetreader Not a pure module */
