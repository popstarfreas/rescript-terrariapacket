// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Option = require("@rescript/core/src/Core__Option.bs.js");
var ArrayExt$TerrariaPacket = require("./ArrayExt.bs.js");
var BitFlags$TerrariaPacket = require("./BitFlags.bs.js");

function pack(writer, self) {
  return writer.packByte(self.playerId).packSingle(self.value);
}

function parse(reader) {
  return {
          playerId: reader.readByte(),
          value: reader.readSingle()
        };
}

function pack$1(writer, self) {
  if (self.TAG === "Everyone") {
    var values = self._0;
    var bytes = ArrayExt$TerrariaPacket.intoChunks(values, 8).map(BitFlags$TerrariaPacket.fromArray).map(BitFlags$TerrariaPacket.toByte);
    return writer.packByte(0).packBytes(bytes);
  } else {
    var playerId = self._0;
    var value = self._1;
    return writer.packByte(1).packByte(playerId).packByte(value ? 1 : 0);
  }
}

function parse$1(reader) {
  var match = reader.readByte();
  if (match !== 0) {
    if (match !== 1) {
      return ;
    } else {
      return {
              TAG: "Player",
              _0: reader.readByte(),
              _1: reader.readByte() === 1
            };
    }
  } else {
    var toggles = [];
    for(var _for = 1; _for <= 32; ++_for){
      var $$byte = reader.readByte();
      BitFlags$TerrariaPacket.forEach(BitFlags$TerrariaPacket.fromByte($$byte), (function (flag) {
              toggles.push(flag);
            }));
    }
    toggles.pop();
    return {
            TAG: "Everyone",
            _0: toggles
          };
  }
}

function fromInt(n) {
  switch (n) {
    case 0 :
        return "FreezeTime";
    case 1 :
        return "StartDayImmediately";
    case 2 :
        return "StartNoonImmediately";
    case 3 :
        return "StartNightImmediately";
    case 4 :
        return "StartMidnightImmediately";
    case 5 :
        return "GodmodePower";
    case 6 :
        return "ModifyWindDirectionAndStrength";
    case 7 :
        return "ModifyRainPower";
    case 8 :
        return "ModifyTimeRate";
    case 9 :
        return "FreezeRainPower";
    case 10 :
        return "FreezeWindDirectionAndStrength";
    case 11 :
        return "FarPlacementRangePower";
    case 12 :
        return "DifficultySliderPower";
    case 13 :
        return "StopBiomeSpreadPower";
    case 14 :
        return "SpawnRateSliderPerPlayerPower";
    default:
      return ;
  }
}

function toInt(self) {
  switch (self) {
    case "FreezeTime" :
        return 0;
    case "StartDayImmediately" :
        return 1;
    case "StartNoonImmediately" :
        return 2;
    case "StartNightImmediately" :
        return 3;
    case "StartMidnightImmediately" :
        return 4;
    case "GodmodePower" :
        return 5;
    case "ModifyWindDirectionAndStrength" :
        return 6;
    case "ModifyRainPower" :
        return 7;
    case "ModifyTimeRate" :
        return 8;
    case "FreezeRainPower" :
        return 9;
    case "FreezeWindDirectionAndStrength" :
        return 10;
    case "FarPlacementRangePower" :
        return 11;
    case "DifficultySliderPower" :
        return 12;
    case "StopBiomeSpreadPower" :
        return 13;
    case "SpawnRateSliderPerPlayerPower" :
        return 14;
    
  }
}

var CreativePowerType = {
  fromInt: fromInt,
  toInt: toInt
};

function pack$2(writer, self) {
  if (typeof self !== "object") {
    switch (self) {
      case "StartDayImmediately" :
          return writer.packUInt16(1);
      case "StartNoonImmediately" :
          return writer.packUInt16(2);
      case "StartNightImmediately" :
          return writer.packUInt16(3);
      case "StartMidnightImmediately" :
          return writer.packUInt16(4);
      
    }
  } else {
    switch (self.TAG) {
      case "FreezeTime" :
          var value = self._0;
          return writer.packUInt16(0).packByte(value ? 1 : 0);
      case "GodmodePower" :
          var message = self._0;
          return pack$1(writer.packUInt16(5), message);
      case "ModifyWindDirectionAndStrength" :
          var value$1 = self._0;
          return writer.packUInt16(6).packSingle(value$1);
      case "ModifyRainPower" :
          var value$2 = self._0;
          return writer.packUInt16(7).packSingle(value$2);
      case "ModifyTimeRate" :
          var value$3 = self._0;
          return writer.packUInt16(8).packSingle(value$3);
      case "FreezeRainPower" :
          var on = self._0;
          return writer.packUInt16(9).packByte(on ? 1 : 0);
      case "FreezeWindDirectionAndStrength" :
          var on$1 = self._0;
          return writer.packUInt16(10).packByte(on$1 ? 1 : 0);
      case "FarPlacementRangePower" :
          var message$1 = self._0;
          return pack$1(writer.packUInt16(11), message$1);
      case "DifficultySliderPower" :
          var value$4 = self._0;
          return writer.packUInt16(12).packSingle(value$4);
      case "StopBiomeSpreadPower" :
          var on$2 = self._0;
          return writer.packUInt16(13).packByte(on$2 ? 1 : 0);
      case "SpawnRateSliderPerPlayerPower" :
          var message$2 = self._0;
          return pack(writer.packUInt16(14), message$2);
      
    }
  }
}

function parse$2(reader) {
  var match = reader.readUInt16();
  switch (match) {
    case 0 :
        return {
                TAG: "FreezeTime",
                _0: reader.readByte() === 1
              };
    case 1 :
        return "StartDayImmediately";
    case 2 :
        return "StartNoonImmediately";
    case 3 :
        return "StartNightImmediately";
    case 4 :
        return "StartMidnightImmediately";
    case 5 :
        return Core__Option.map(parse$1(reader), (function (m) {
                      return {
                              TAG: "GodmodePower",
                              _0: m
                            };
                    }));
    case 6 :
        return {
                TAG: "ModifyWindDirectionAndStrength",
                _0: reader.readSingle()
              };
    case 7 :
        return {
                TAG: "ModifyRainPower",
                _0: reader.readSingle()
              };
    case 8 :
        return {
                TAG: "ModifyTimeRate",
                _0: reader.readSingle()
              };
    case 9 :
        return {
                TAG: "FreezeRainPower",
                _0: reader.readByte() === 1
              };
    case 10 :
        return {
                TAG: "FreezeWindDirectionAndStrength",
                _0: reader.readByte() === 1
              };
    case 11 :
        return Core__Option.map(parse$1(reader), (function (m) {
                      return {
                              TAG: "FarPlacementRangePower",
                              _0: m
                            };
                    }));
    case 12 :
        return {
                TAG: "DifficultySliderPower",
                _0: reader.readSingle()
              };
    case 13 :
        return {
                TAG: "StopBiomeSpreadPower",
                _0: reader.readByte() === 1
              };
    case 14 :
        return Core__Option.map(parse(reader), (function (m) {
                      return {
                              TAG: "SpawnRateSliderPerPlayerPower",
                              _0: m
                            };
                    }));
    default:
      return ;
  }
}

var PerPlayerSliderPower = {
  pack: pack,
  parse: parse
};

var PerPlayerTogglePower = {
  pack: pack$1,
  parse: parse$1
};

exports.PerPlayerSliderPower = PerPlayerSliderPower;
exports.PerPlayerTogglePower = PerPlayerTogglePower;
exports.CreativePowerType = CreativePowerType;
exports.pack = pack$2;
exports.parse = parse$2;
/* No side effect */
